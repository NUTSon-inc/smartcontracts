// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

import "hardhat/console.sol";

contract NTN is ERC20, Ownable {
    uint256 constant MAX_VALUE = 10500000000000000000000000000;

    uint256[] emission = [
    0, 3109851780904090000000000,
    6249641714442770000000000,
    10084889952511700000000000,
    14672586055963000000000000,
    20026396863732300000000000,
    26185244669927700000000000,
    33178131623430500000000000,
    41062525388816100000000000,
    49979651340586300000000000,
    60070811706912700000000000,
    71803200649913800000000000,
    85581054554481400000000000,
    101932918558997000000000000,
    121389288987047000000000000,
    144337184525459000000000000,
    171082641346680000000000000,
    202025617887956000000000000,
    238127220279362000000000000,
    280350362049352000000000000,
    329499542815253000000000000,
    386423002060787000000000000,
    452294914935389000000000000,
    528248739679930000000000000,
    615625535427044000000000000,
    715459723769477000000000000,
    828751707004258000000000000,
    956441381026356000000000000,
    1099379837482870000000000000,
    1258300039556430000000000000,
    1433787399366190000000000000,
    1626251299628300000000000000,
    1835898677902380000000000000,
    2062710819815060000000000000,
    2306424481560600000000000000,
    2566518377995240000000000000,
    2842205930361330000000000000,
    3132434970350250000000000000,
    3435894851815490000000000000,
    3751031138469320000000000000,
    4076067728846200000000000000,
    4409035964460800000000000000,
    4747809960484780000000000000,
    5090147117640490000000000000,
    5433732535580500000000000000,
    5776225865860780000000000000,
    6115309027632430000000000000,
    6448733168323130000000000000,
    6774363287338130000000000000,
    7090219051007700000000000000,
    7394510504978880000000000000,
    7685667625325640000000000000,
    7962362927945740000000000000,
    8223526661211550000000000000,
    8468354422152790000000000000,
    8696307344566100000000000000,
    8907105292484550000000000000,
    9100713740713390000000000000,
    9277325224937360000000000000,
    9437336390007650000000000000,
    9581321752923600000000000000,
    9710005326902940000000000000,
    9824231228313890000000000000,
    9924934315490050000000000000,
    10013111796099800000000000000,
    10089796597730400000000000000,
    10156033135232800000000000000,
    10212855938593200000000000000,
    10261271436322800000000000000,
    10302243029976300000000000000,
    10336679452167400000000000000,
    10365426278236800000000000000,
    10389260363567800000000000000,
    10408886905627400000000000000,
    10424938781756100000000000000,
    10437977788827600000000000000,
    10448497406426300000000000000,
    10456926717784800000000000000,
    10463635148670800000000000000,
    10468937719942000000000000000,
    10473100551039000000000000000,
    10476346396036700000000000000,
    10478860038324600000000000000,
    10480793412362000000000000000,
    10482270359669600000000000000,
    10483390960220200000000000000,
    10484235409116500000000000000,
    10484867431739900000000000000,
    10485337248588000000000000000,
    10485684114211200000000000000,
    10485938463568700000000000000,
    10486123704408100000000000000,
    10486257696617000000000000000,
    10486353959544100000000000000,
    10486422646661700000000000000,
    10486471324157700000000000000,
    10486505586565600000000000000,
    10486529538701100000000000000,
    10486546169277900000000000000,
    10486557637790500000000000000,
    10486565492743400000000000000,
    10486570836132400000000000000,
    MAX_VALUE
    ];

    uint256[] daysIncremented = [
    0,
    31,
    62,
    92,
    123,
    153,
    184,
    215,
    243,
    274,
    304,
    335,
    365,
    396,
    427,
    457,
    488,
    518,
    549,
    580,
    608,
    639,
    669,
    700,
    730,
    761,
    792,
    822,
    853,
    883,
    914,
    945,
    973,
    1004,
    1034,
    1065,
    1095,
    1126,
    1157,
    1187,
    1218,
    1248,
    1279,
    1310,
    1338,
    1369,
    1399,
    1430,
    1460,
    1491,
    1522,
    1552,
    1583,
    1613,
    1644,
    1675,
    1703,
    1734,
    1764,
    1795,
    1825,
    1856,
    1887,
    1917,
    1948,
    1978,
    2009,
    2040,
    2068,
    2099,
    2129,
    2160,
    2190,
    2221,
    2252,
    2282,
    2313,
    2343,
    2374,
    2405,
    2433,
    2464,
    2494,
    2525,
    2555,
    2586,
    2617,
    2647,
    2678,
    2708,
    2739,
    2770,
    2798,
    2829,
    2859,
    2890,
    2920,
    2951,
    2982,
    3012,
    3043,
    3073,
    type(uint).max
    ];

    uint256 immutable createDate;
    uint256 constant daysIncrementedLength = 103;

    constructor(uint256 _createDate) ERC20("NTN", "NTN") {
        createDate = _createDate;
    }

    function mint(address _to, uint256 _amount) external onlyOwner {
        require(totalSupply() + _amount <= maxSupply(block.timestamp));
        _mint(_to, _amount);
    }

    function burn(address _from, uint256 _amount) external onlyOwner {
        _burn(_from, _amount);
    }

    function maxSupply(uint256 currentTimestamp) public view returns (uint256) {
        uint256 _secondsPassed = secondsPassed(currentTimestamp);
        uint256 dayNow = _secondsPassed / 86400;
        uint256 index = findUpperBound(dayNow, currentTimestamp);
        uint256 timePassed;
        uint256 interval;

        if (index == daysIncrementedLength - 1)
            return MAX_VALUE;

        else if (index > 0) {
            timePassed = _secondsPassed - daysIncremented[index - 1] * 86400;
            interval = (daysIncremented[index] - daysIncremented[index - 1]) * 86400;
        }
        else {
            index = 1;
            timePassed = _secondsPassed;
            interval = daysIncremented[index] * 86400;
        }

        return emission[index - 1] + ((emission[index] - emission[index - 1]) * timePassed) / interval;
    }

    function findUpperBound(uint256 element, uint256 currentTimestamp) internal view returns (uint256) {
        uint256 low = 0;
        uint256 high = daysIncrementedLength;
        uint256 mid;

        while (low < high) {
            mid = (low + high) / 2;

            if (daysIncremented[mid] > element) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }

        if (low > 0 && daysIncremented[low - 1] == element) {
            return low - 1;
        } else {
            return low;
        }
    }

    function secondsPassed(uint256 currentTimestamp) public view returns (uint256) {
        return currentTimestamp - createDate;
    }
}
